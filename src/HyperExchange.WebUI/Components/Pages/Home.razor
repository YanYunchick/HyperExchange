@page "/"
@rendermode InteractiveServer
@inject IWSConnector WSConnector;
@inject IRestConnector RestConnector;
@inject IWalletService WalletService;
@implements IDisposable;


<h3>Wallet</h3>
<table class="table">
	<thead>
		<tr>
			<th>Currency</th>
			<th>Total Balance</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var balance in balances)
		{
			<tr>
				<td>@balance.CurrencyCode</td>
				<td>@balance.totalBalance</td>
			</tr>
		}
	</tbody>
</table>

<h3>Websocket Trades</h3>
<button class="btn btn-danger" @onclick="UnsubscribeTrade">Unsubscribe</button>
<div style="max-height: 200px; overflow: auto">
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Id</th>
				<th>Pair</th>
				<th>Price</th>
				<th>Amount</th>
				<th>Side</th>
				<th>Time</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var trade in websocketTrades)
			{
				<tr>
					<td>@trade.Id</td>
					<td>@trade.Pair</td>
					<td>@trade.Price</td>
					<td>@trade.Amount</td>
					<td>@trade.Side</td>
					<td>@trade.Time.ToString("yyyy-MM-dd HH:mm:ss")</td>
				</tr>
			}
		</tbody>
	</table>
</div>

<h3>Websocket Candles</h3>
<button class="btn btn-danger" @onclick="UnsubscribeCandle">Unsubscribe</button>
<div style="max-height: 200px; overflow: auto">
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Pair</th>
				<th>Open Price</th>
				<th>High Price</th>
				<th>Low Price</th>
				<th>Close Price</th>
				<th>Total Price</th>
				<th>Total Volume</th>
				<th>Open Time</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var candle in websocketCandles)
			{
				<tr>
					<td>@candle.Pair</td>
					<td>@candle.OpenPrice</td>
					<td>@candle.HighPrice</td>
					<td>@candle.LowPrice</td>
					<td>@candle.ClosePrice</td>
					<td>@candle.TotalPrice</td>
					<td>@candle.TotalVolume</td>
					<td>@candle.OpenTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
				</tr>
			}
		</tbody>
	</table>
</div>

<h3>REST Trades</h3>
<button class="btn btn-danger" @onclick="GetTrades">Update Trades</button>
<div style="max-height: 200px; overflow: auto">
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Id</th>
				<th>Pair</th>
				<th>Price</th>
				<th>Amount</th>
				<th>Side</th>
				<th>Time</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var trade in restTrades)
			{
				<tr>
					<td>@trade.Id</td>
					<td>@trade.Pair</td>
					<td>@trade.Price</td>
					<td>@trade.Amount</td>
					<td>@trade.Side</td>
					<td>@trade.Time.ToString("yyyy-MM-dd HH:mm:ss")</td>
				</tr>
			}
		</tbody>
	</table>
</div>

<h3>REST Candles</h3>
<button class="btn btn-danger" @onclick="GetCandles">Update Candles</button>
<div style="max-height: 200px; overflow: auto">
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Pair</th>
				<th>Open Price</th>
				<th>High Price</th>
				<th>Low Price</th>
				<th>Close Price</th>
				<th>Total Price</th>
				<th>Total Volume</th>
				<th>Open Time</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var candle in restCandles)
			{
				<tr>
					<td>@candle.Pair</td>
					<td>@candle.OpenPrice</td>
					<td>@candle.HighPrice</td>
					<td>@candle.LowPrice</td>
					<td>@candle.ClosePrice</td>
					<td>@candle.TotalPrice</td>
					<td>@candle.TotalVolume</td>
					<td>@candle.OpenTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
				</tr>
			}
		</tbody>
	</table>
</div>
@code {
	private CancellationTokenSource source = new CancellationTokenSource();
	private List<Trade> websocketTrades = new();
	private List<Trade> restTrades = new();
	private List<Candle> websocketCandles = new();
	private List<Candle> restCandles = new();
	private List<(string CurrencyCode, decimal totalBalance)> balances = new();

	private bool _isConnected = false;

	protected override async Task OnInitializedAsync()
	{
		balances = await WalletService.CalculateTotalBalanceAsync();

		if (!_isConnected)
		{
			await WSConnector.ConnectAsync(source.Token);
			_isConnected = true;
		}

		WSConnector.NewBuyTrade += OnNewBuyTrade;
		WSConnector.NewSellTrade += OnNewSellTrade;
		WSConnector.CandleSeriesProcessing += OnNewCandle;

		await WSConnector.SubscribeTrades("BTCUSD", source.Token);
		await WSConnector.SubscribeCandles("BTCUSD", 60, source.Token);
	}

	private void OnNewBuyTrade(Trade trade)
	{
		websocketTrades.Add(trade);
		InvokeAsync(StateHasChanged);
	}

	private void OnNewSellTrade(Trade trade)
	{
		websocketTrades.Add(trade);
		InvokeAsync(StateHasChanged);
	}

	private void OnNewCandle(Candle candle)
	{
		websocketCandles.Add(candle);
		InvokeAsync(StateHasChanged);
	}

	private async Task UnsubscribeTrade()
	{
		WSConnector.NewBuyTrade -= OnNewBuyTrade;
		WSConnector.NewSellTrade -= OnNewSellTrade;

		await WSConnector.UnsubscribeTrades("BTCUSD", source.Token);

		Console.WriteLine("Unsubscribed from trades");
	}

	private async Task UnsubscribeCandle()
	{
		WSConnector.CandleSeriesProcessing -= OnNewCandle;

		await WSConnector.UnsubscribeCandles("BTCUSD", source.Token);

		Console.WriteLine("Unsubscribed from candles");
	}

	private async Task GetTrades()
	{
		restTrades = (await RestConnector.GetNewTradesAsync("BTCUSD", 50, source.Token)).ToList();

		await InvokeAsync(StateHasChanged);
	}

	private async Task GetCandles()
	{
		restCandles = (await RestConnector.GetCandleSeriesAsync(
			"BTCUSD", 
			60, 
			source.Token,
			DateTimeOffset.UtcNow.AddDays(-1),
			DateTimeOffset.UtcNow,
			50)).ToList();

		await InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		source.Cancel();
		source.Dispose();
	}
}